1a.

%{
	int id=0,op=0,v=0;
%}

%%
[a-zA-Z0-9]+ { id++; printf("\nIdentifier: "); ECHO; }
[\+\-\*\/\=] { op++; printf("\nOperator: "); ECHO; }
"(" v++;
")" v--;
.|\n ;
%%

int main()
{
	printf("Enter the expression\n");
	yylex();
	printf("\nCount of identifiers=%d and operators=%d",id,op);
	if((op+1)==id && v==0)
	printf("\nExpression is valid\n");
	else
	printf("\nExpression is invalid\n");
	return 0;
}


1b.

lex
%{
	#include "y.tab.h"
	extern yylval;
%}
%%
[0-9]+	{ yylval=atoi(yytext); return num; }
[\+\-\*\/]	{ return yytext[0]; }
[)]	{ return yytext[0]; }
[(]	{ return yytext[0]; }
.	{ ; }
\n	{ return 0; }
%%

yacc
%{
	#include<stdio.h>
	#include<stdlib.h>
%}
%token num
%left '+' '-'
%left '*' '/'

%%
input: exp {printf("%d\n",$$);exit(0); }
exp: exp'+' exp {$$=$1+$3;}
|exp'-' exp {$$=$1-$3;}
|exp'*' exp {$$=$1*$3;}
|exp'/' exp {if ($3==0) {printf("Divide by Zero\n");exit(0);}
else $$=$1/$3;}
|'('exp')'{$$=$2;}
|num{$$=$1;};
%%

int yyerror()
{
	printf("error");
	exit(0);
}

int main()
{
	printf("Enter an expression: \n");
	yyparse();
}