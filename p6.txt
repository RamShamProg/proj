6a

l
%%
"//".* ;
"/*"[^*/]*"*/" ;
%%

int main()
{
	yyin=fopen("input.c","r");
	yyout=fopen("output.c","w");
	yylex();
}

6b

l
%{
	#include "y.tab.h"
	extern yylval;
%}

%%
[ /t]	;
[+|-|*|/|=|<|>]	{ printf("operator is %s\n",yytext); return OP; }
[0-9]+	{ yylval= atoi(yytext); printf("number is %d\n",yylval); return DIGIT; }
int|char|bool|float|void|for|do|while|if|else|return|void	{ printf("keyword is %s\n",yytext);return KEY; }
[a-zA-Z0-9]+	{ printf("identifier is %s\n",yytext);return ID; }
.	;
%%

y

%{
	#include <stdio.h>
	#include <stdlib.h>
	int id=0,dig=0,key=0,op=0;
%}
%token DIGIT ID KEY OP
%%
input:
DIGIT input { dig++; }
| ID input { id++; }
| KEY input { key++; }
| OP input { op++; }
| DIGIT { dig++; }
| ID { id++; }
| KEY { key++; }
| OP { op++; }
;
%%

extern FILE *yyin;
int main()
{
	yyin=fopen ("demo.c","r");
	if(!yyin)
	{
		printf("File not found");
		exit(0);
	}
	yyparse();
	printf("Identifier count=%d, Digit count=%d,Keyword count=%id,Operator count=%d\n",id,dig,key,op);
	return 0;
}

void yyerror()
{
	printf("EEK,parse error! Message: ");
	exit(0);
}




lex filename.l
cc lex.yy.c -ll
./a.out


yacc


yacc -d name.y
lex name.l
cc y.tab.c lex.yy.c -ll -ly
